#!/usr/bin/env ruby

require 'erb'
require 'pp'
require 'psych'
require 'trollop'
require 'fileutils'
require_relative "rules.rb"
require_relative "helpers.rb"

QA_GENERATE_VERSION = "2.10.20141022"


# Specify commandline options
opts = Trollop::options do
	version "qa_generate #{QA_GENERATE_VERSION} (c) 2014 Peerius Ltd"
	banner <<-EOS
qa_generate is a test creation tool which takes YAML input (see: yaml.org) and
generates .feature and page class files in order to test Peerius code on client sites.

Usage:
	   qa_generate [options]

where [options] are:
	EOS
	opt :infile, "Sites filename/directory", :type => :string, :default => "sites"
	opt :templates, "Template directory", :type => :string, :default => "templates"
	opt :outfile, "Output directory", :type => :string, :default => "../../"
end

# Use an appropriate input directory if one is not supplied.
opts[:infile] = "sites" unless opts[:infile]

# Start a new sitelist and dbmapping with the first site
sitelist_file_mode = "w"
dbmapping_file_mode = "w"

cur_path = File.expand_path(".",Dir.pwd)
sites_yaml_path = cur_path + "/sites"
templates_path = cur_path + "/templates/features/auto_generate"
utils_path = File.expand_path("..",Dir.pwd) 
output_path = File.expand_path("../..",Dir.pwd)

# first argument needs to be <site_name> to run qa_generate for a single site
site_name_param = ARGV[0] ? ARGV[0] : ""

site_map = {"jmb" => "jojomamanbebe"}

site_name = site_name_param != "" ? (site_map[site_name_param] ? site_map[site_name_param] : site_name_param ) : "<site_name>"

begin
	site_check = Psych.load_file("sites/#{site_name}.yaml")
	rescue Exception => e  
	plog("QA Generate FAILED : Could not find an alias or site configuration file with name #{site_name}.yaml in your /utils/qa_generate/sites folder.","red")
	abort("")
end

num_sites = 0

# Generate sitelist
autosites_filename = output_path + "/features/support/auto_sites.txt"
plog("Creating #{autosites_filename}...","grey") unless sitelist_file_mode == "a" if(site_name_param == "")
FileUtils.mkpath File.dirname(autosites_filename)

# Generate dbmapping
dbmapping_filename = output_path + "/features/support/auto_dbmapping.yaml"
plog("Creating #{dbmapping_filename}...","grey") unless dbmapping_file_mode == "a" if(site_name_param == "")
FileUtils.mkpath File.dirname(dbmapping_filename)


plog("## Templates, Features, Scenarios, Step Definitions - Auto-generated by QA Generator v#{QA_GENERATE_VERSION} ##","grey")

if(site_name == "<site_name>" )
	plog("CONFIG => ","grey")
	plog("\tSite config yaml files are in #{sites_yaml_path}/","grey")
	plog("\tFeature templates are in #{templates_path}/","grey")
	plog("\tStep definition templates are in #{output_path}/features/step_definitions","grey")
	plog("\tSupport modules for each page type are in #{templates_path}/support/pages/","grey")
	plog("OUTPUT => ","grey")
	plog("\tFeature files for each site will be generated in #{output_path}/features","grey")
	plog("\tPage step definition code will be generated in #{output_path}/features/support/pages/","grey")
else
	plog("#{site_name.upcase} CONFIG => ","grey")
	plog("\tSite config file\t   : #{sites_yaml_path}/#{site_name}.yaml","grey")
	plog("#{site_name.upcase} OUTPUT => ","grey")
	#plog("\tFeature file \t\t:: #{output_path}/features/auto_#{site_name}_integration.feature","grey")
	#plog("\tSupport modules \t:: #{output_path}/support/pages/site/","grey")
end

if(site_name == "<site_name>" )
	plog("GENERATE => ","grey") 
else 
	#plog("#{site_name.upcase} => \t\t :: Creating feature files, scenarios and step definition code ...","grey")
end

def generate_files(site, site_name, opts, output_path, do_for_all_sites)

	# Ensure there is a trailing slash
	template_directory = opts[:templates].dup
	template_directory << '/' if template_directory[-1].chr != '/'

	template_files = Dir[template_directory+"**/*"]

	# Generate output files from templates for site
	plog("\t#{site_name.upcase} \t :: Created feature files, scenarios and step definition code","grey") if do_for_all_sites
	files = Array.new
	template_files.each do |template_filename|
		if File.file?(template_filename)
			template_file = File.open(template_filename, "r") { |f| f.read }
			generator = ERB.new(template_file, 0, "<>")
			generator.filename = template_filename
			output_content = generator.result(binding)
			output_filename = output_path + "/" + template_filename.gsub(/#{template_directory}/,'').gsub(/site/, site["site_name"])
			if (output_content =~ /\A#ignore/) then
				# puts "Skipping #{output_filename}. No tests to run." 
			else
				# puts "Creating #{output_filename}..."
				FileUtils.mkpath File.dirname(output_filename)
				output_file = File.open(output_filename, "w")
				output_file << output_content
				filename = template_filename.split("/")[-1].gsub(/site/, site["site_name"])
				if output_filename.include?(".feature")
					plog("\tCreated feature file\t   : #{output_filename}","grey") unless do_for_all_sites
				else
					files << filename
				end
				
			end
		end 
	end
	plog("\tCreated support modules in : #{output_path}/support/pages/","grey") unless do_for_all_sites
	if !do_for_all_sites && files.length > 4
		plog("\t\t\t\t   : #{files[0..3].join(", ")}","grey") 
	    plog("\t\t\t\t   : #{files[4..-1].join(", ")}","grey") 
	else
		plog("\t\t\t\t   : #{files.join(", ")}","grey") if !do_for_all_sites 
	end
	return true
end

if(site_name!="") 
	site_file = Psych.load_file("sites/#{site_name}.yaml")
	# Generate output files from templates for site
	generate_files(site_file,site_name,opts,output_path,do_for_all_sites=false)
	plog("## Auto-generation completed for #{site_name.upcase} ##","grey")
else
		
	# Ensure input file exists 
	Trollop::die :infile, "File: '#{opts[:infile]}' must exist" unless File.exist?(opts[:infile])
	Trollop::die :infile, "File: '#{opts[:templates]}' must exist" unless File.exist?(opts[:templates])

	input_file = opts[:infile]
    input_file += "/*.yaml" if File.directory?(input_file)
	
	# output_path = opts[:outfile].dup
	# output_path = "../../" unless opts[:outfile]
	# output_path << '/' if output_path[-1].chr != '/'
	# output_path = File.dirname(__FILE__)

	site_files = Dir[input_file]
	num_sites = site_files.length
	site_files.each do |site_filename|
		# Load the site YAML file
		#site = YAML::load(File.open(site_filename, 'r:utf-8'))
		site_file = Psych.load_file(site_filename)

		# Generate output files from templates
		# puts "#{site_filename.partition('/').last.upcase}: Generating features from #{sites_yaml_path + site_filename.partition('/').last} \n \t\t\t using templates in #{cur_path}templates/features"
		site_name = site_filename.partition('/').last.partition('.').first
		generate_files(site_file,site_name,opts,output_path,do_for_all_sites=true)

		File.open(autosites_filename, sitelist_file_mode) do |asfile|
			site_name = site_file["home_page"]["URL"]
			site_name.gsub!(/https?:\/\//,'')
			site_name.gsub!(/www\./,'')
			site_name.gsub!(/\/.*$/, '')
			asfile.puts site_file["home_page"]["URL"] + "\n"
		end
		sitelist_file_mode = "a"
		File.open(dbmapping_filename, dbmapping_file_mode) do |dbmfile|
			dbmfile.puts "#{site_file["site_name"]}:\n"
			dbmfile.puts "  db: #{site_file["database_num"]}" unless site_file["database_num"].nil?
			dbmfile.puts "  site_id: #{site_file["site_id"]}" unless site_file["site_id"].nil?
		end
		dbmapping_file_mode = "a"
	
	end
	plog("<<<< QA_GENERATE DONE FOR #{num_sites} SITES >>>>","grey")
end





